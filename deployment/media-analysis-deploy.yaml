AWSTemplateFormatVersion: "2010-09-09"
Description: (SO0042) %%SOLUTION_NAME%% - The %%SOLUTION_NAME%% is a serverless solution that leverages managed AWS services to automatically analyze your audio, video, and image files in order to extract valuable metadata. Version %%VERSION%%

Parameters:
    Email:
        Type: String
        Description: Your email address
        AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: "Solution Configuration"
                Parameters:
                    - Email
                    
        ParameterLabels:
            Email:
                default: "Email address"

Mappings:
    Send:
        AnonymousUsage:
            Data: "Yes"
    SourceCode:
        General:
            S3Bucket: "%%BUCKET_NAME%%"
            KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"

Resources:
    MediaAnalysisBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      DependsOn: MediaAnalysisNewMediaPermission
      Properties:
        BucketName: !Sub 'media-analysis-${AWS::Region}-${AWS::AccountId}'
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            -
              ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        CorsConfiguration:
          CorsRules:
            -
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - 'PUT'
                - 'GET'
                - 'POST'
              AllowedOrigins:
                - '*'
              ExposedHeaders:
                - 'ETAG'
              MaxAge: 3000
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: "s3:ObjectCreated:*"
              Function: !GetAtt MediaAnalysisFunction.Arn
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: 'private/'
        LoggingConfiguration:
          DestinationBucketName: !Ref Logs
          LogFilePrefix: media-analysis-logs
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W51
              reason: Bucket does not need a policy

    Logs:
      DeletionPolicy: Retain
      Type: AWS::S3::Bucket
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W35
              reason: This S3 bucket is used as the logging destination for CloudFront and two other buckets created by this solution.
            - id: W51
              reason: Bucket does not need a policy
      Properties:
        AccessControl: LogDeliveryWrite
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    MediaAnalysisHelperRole:
        Type: AWS::IAM::Role
        Metadata:
          cfn_nag:
            rules_to_suppress:
              - id: W11
                reason: Refer to inline comments for the wildcard justification.
        Properties:
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Principal:
                    Service:
                      - "lambda.amazonaws.com"
                  Action:
                    - "sts:AssumeRole"
            Path: /
            Policies:
              -
                PolicyName: media-analysis-helper-policy
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      -
                        Effect: "Allow"
                        Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                        # The resource is limited to lambda log group only.
                        Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
                      -
                        Effect: "Allow"
                        Action:
                          - "s3:GetObject"
                        # This is only a read-only access to S3 buckets. This roles is used to
                        # download the solutions artifacts from the AWS Solutions bucket.
                        Resource: "arn:aws:s3:::*"
                      -
                        Effect: "Allow"
                        Action:
                          - "s3:PutObject"
                        # This resource is limited to a bucket created by this solution.
                        Resource: !Join ["", ["arn:aws:s3:::", !Ref MediaAnalysisWebsiteBucket, "/*"]]

    MediaAnalysisHelperFunction:
        Type: AWS::Lambda::Function
        Properties:
            Description: "AWS Lambda function to help the %%SOLUTION_NAME%% template"
            Code:
                S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref "AWS::Region"]]
                S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "media-analysis-helper.zip"]]
            Handler: index.handler
            Runtime: nodejs12.x
            Role: !GetAtt MediaAnalysisHelperRole.Arn
            Timeout: 300
            MemorySize: 256

    GenerateUuid:
        Type: Custom::CreateUuid
        Properties:
            ServiceToken: !GetAtt MediaAnalysisHelperFunction.Arn
            customAction: "createUuid"

    SendConfiguration:
        Type: Custom::SendConfig
        Properties:
            ServiceToken: !GetAtt MediaAnalysisHelperFunction.Arn
            customAction: "sendConfig"
            uuid: !GetAtt GenerateUuid.uuid
            solutionId: SO0042
            version: "%%VERSION%%"
            size: !Ref Size
            metrics: !FindInMap ["Send", "AnonymousUsage", "Data"]

    MediaAnalysisStateMachineStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.amazonaws.com", !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]] , !FindInMap ["SourceCode", "General", "KeyPrefix"], "media-analysis-state-machine-stack.template"]]
            Parameters:
                MediaAnalysisFunction: !GetAtt MediaAnalysisFunction.Arn
                StateMachineName: media-analysis-state-machine

    MediaConvertRole:
      Type: AWS::IAM::Role
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W11
              reason: The S3 bucket in the resource is limited to a bucket created by this solution.
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "mediaconvert.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: media-analysis-mediaconvert-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Read input object
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                  Resource: !Sub 'arn:aws:s3:::media-analysis-${AWS::Region}-${AWS::AccountId}/*'

                # Write output object
                - Effect: "Allow"
                  Action:
                    - s3:PutObject
                  Resource: !Sub 'arn:aws:s3:::media-analysis-${AWS::Region}-${AWS::AccountId}/*'

    MediaAnalysisFunction:
        Type: AWS::Lambda::Function
        Properties:
            Description: "AWS Lambda function to execute analysis"
            Code:
                S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref "AWS::Region"]]
                S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "media-analysis-function.zip"]]
            Handler: index.handler
            Runtime: nodejs12.x
            Role: !GetAtt MediaAnalysisFunctionRole.Arn
            Timeout: 60
            MemorySize: 256
            Environment:
                Variables:
                    CONFIDENCE_SCORE: '0'
                    DOMAIN_ENDPOINT: !GetAtt MediaAnalysisStorageStack.Outputs.EsCluster
                    ES_INDEX: media-analysis
                    ES_VERSION: !Ref Version
                    S3_BUCKET: !Join ["", ["media-analysis-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]
                    STATE_MACHINE: !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:media-analysis-state-machine"]]
                    UUID: !GetAtt GenerateUuid.uuid
                    METRICS: !FindInMap ["Send", "AnonymousUsage", "Data"]
                    SOLUTIONID: SO0042
                    MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn

    MediaAnalysisFunctionRole:
        Type: AWS::IAM::Role
        Metadata:
          cfn_nag:
            rules_to_suppress:
              - id: W11
                reason: "Refer to inline comments for the wildcard justification."
        Properties:
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Principal:
                    Service:
                      - "lambda.amazonaws.com"
                  Action:
                    - "sts:AssumeRole"
            Path: /
            Policies:
              -
                PolicyName: media-analysis-function-policy
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      -
                        Effect: "Allow"
                        Action:
                          - "rekognition:CreateCollection"
                          - "rekognition:DetectFaces"
                          - "rekognition:DetectLabels"
                          - "rekognition:GetCelebrityRecognition"
                          - "rekognition:GetFaceDetection"
                          - "rekognition:GetFaceSearch"
                          - "rekognition:GetLabelDetection"
                          - "rekognition:GetPersonTracking"
                          - "rekognition:IndexFaces"
                          - "rekognition:RecognizeCelebrities"
                          - "rekognition:SearchFacesByImage"
                          - "rekognition:StartCelebrityRecognition"
                          - "rekognition:StartFaceDetection"
                          - "rekognition:StartFaceSearch"
                          - "rekognition:StartLabelDetection"
                          - "rekognition:StartPersonTracking"
                        # Wildcards in the Rekognition resource ARNs are present
                        # due to Rekognition needing access to collections that
                        # have IDs based off of a UUID generator.
                        # https://docs.aws.amazon.com/rekognition/latest/dg/api-permissions-reference.html
                        Resource: "*"
                      -
                        Effect: "Allow"
                        Action:
                          - "comprehend:BatchDetectEntities"
                          - "comprehend:BatchDetectKeyPhrases"
                        # These actions require resource wildcards per the
                        # Comprehend documentation.
                        # https://docs.aws.amazon.com/comprehend/latest/dg/comprehend-api-permissions-ref.html
                        Resource: "*"
                      -
                        Effect: "Allow"
                        Action:
                          - "transcribe:GetTranscriptionJob"
                          - "transcribe:StartTranscriptionJob"
                        # These actions require resource wildcards per the
                        # Transcribe documentation.
                        # https://docs.aws.amazon.com/transcribe/latest/dg/asc-api-permissions-ref.html
                        Resource: "*"
                      -
                        Effect: "Allow"
                        Action:
                          - "s3:GetObject"
                          - "s3:PutObject"
                        Resource:
                          # The bucket name is constructed rather than referenced
                          # due to a circular dependency between the S3 Bucket
                          # and the Lambda events. The wildcard is present because
                          # the step function will need access to objects in the
                          # bucket that have a path based off of UUIDs.
                          - !Join ["", ["arn:aws:s3:::", "media-analysis-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId", "/*"]]
                      -
                        Effect: "Allow"
                        Action:
                          - "states:StartExecution"
                        Resource: !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:media-analysis-state-machine"]]
                      -
                        Effect: "Allow"
                        Action:
                          - "mediaConvert:DescribeEndpoints"
                          - "mediaConvert:CreateJob"
                          - "mediaConvert:GetJob"
                        # This wildcard is present because the MediaConvert job
                        # IDs are randomly generated.
                        Resource: "*"
                      -
                        Effect: "Allow"
                        Action:
                          - "iam:GetRole"
                          - "iam:PassRole"
                        Resource: !GetAtt MediaConvertRole.Arn

                      -
                        Effect: "Allow"
                        Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                        # This wildcard is present because we're letting the
                        # Lambda function name the CloudWatch log group.
                        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-identity-based-access-control-cwl.html
                        Resource: "*"

    MediaAnalysisNewMediaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt MediaAnalysisFunction.Arn
            Principal: s3.amazonaws.com
            SourceAccount: !Ref AWS::AccountId
            SourceArn: !Sub 'arn:aws:s3:::media-analysis-${AWS::Region}-${AWS::AccountId}'

Outputs:
    SolutionUUID:
        Description: "Solution UUID"
        Value: !GetAtt GenerateUuid.uuid
    SolutionVersion:
      Description: Version Number
      Value: "%%VERSION%%"
